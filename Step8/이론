웹 스코프 

request: HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴
스가 생성되고, 관리된다.
session: HTTP Session과 동일한 생명주기를 가지는 스코프
application: 서블릿 컨텍스트( ServletContext )와 동일한 생명주기를 가지는 스코프
websocket: 웹 소켓과 동일한 생명주기를 가지는 스코프


스프링 부트는 웹 라이브러리가 없으면 우리가 지금까지 학습한 
AnnotationConfigApplicationContext 을 기반으로 애플리케이션을 구동한다. 웹 라이브러리가 추가되
면 웹과 관련된 추가 설정과 환경들이 필요하므로
AnnotationConfigServletWebServerApplicationContext 를 기반으로 애플리케이션을 구동한다



@Controller
@RequiredArgsConstructor
public class LogDemoController {

	private final LogDemoService logDemoService;
	//private final MyLogger myLogger; //myLogger를 스프링 시작시에 주입 받아야하는데 scope가 request이므로 고객요청이 없기때문에 오류가난다.
	//DL :  시작시에 주입받는게아니라 찾는것 ObjectProvider
	private final MyLogger myLogger;// provider가 동작하는거 처럼  proxyMode = ScopedProxyMode.TARGET_CLASS 를 해주면 기존 의존성 주입시 값이 없어 오류가 나는 부분을 프록시 껍데기를 컨테이너에 넣어주고 실제 요청이 있을떄 주입을 해준다.
	//지연 처리 .... http요청이 있을때 까지 버틴다 .
	
	@RequestMapping("log-demo")
	@ResponseBody
	public String logDem(HttpServletRequest request) {
		
	String requestUrl=	request.getRequestURL().toString();
	myLogger.setRequsetUrl(requestUrl);
	
	myLogger.log("controller test");
	logDemoService.logic("testId");
	
	return "OK";
	
	}
}
@Component
@Scope(value="request",proxyMode = ScopedProxyMode.TARGET_CLASS)
public class MyLogger {

	private String uuid;
	private String requestUrl; 
	
	public void setRequsetUrl(String requestUrl) {
		this.requestUrl = requestUrl;
		
	}
	
	public void log(String message) {
		System.out.println("["+ uuid+"]"+"["+requestUrl+"]"+"["+message+"]");
	
	
	}

@PostConstruct
public void init() {
	uuid=UUID.randomUUID().toString();
	System.out.println("["+ uuid+"] request scope bean create "+this);

}

@PreDestroy
public void close() {
	System.out.println("["+ uuid+"] request scope bean close "+this);
}
}


@Service
@RequiredArgsConstructor
public class LogDemoService {

	//private final MyLogger myLogger;
	private final MyLogger myLogger;
	
	public void logic(String id) {
		
		myLogger.log("Service id= "+id);
	}
}
